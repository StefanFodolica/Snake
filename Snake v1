<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Snake Game</title>
    <style>
      body {
        background-color: aliceblue;
      }
      .container {
        font-family: Arial, sans-serif;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      #main-menu {
        font-family: Arial, sans-serif;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      #main-menu p {
        font-size: 36px;
        font-weight: bold;
      }
      .container button {
        margin-top: 20px;
        padding: 16px 48px;
        font-size: 24px;
        cursor: pointer;
        background-color: yellow;
        border: solid black 3px;
        border-radius: 16px;
      }
      .container button:hover {
        background-color: lightyellow;
      }
      #game-screen {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        display: none;
      }
      #game-board {
        position: relative;
        width: 400px;
        height: 400px;
        background-color: #000;
        border: solid red 16px;
      }
      .snake,
      .food {
        position: absolute;
        width: 20px;
        height: 20px;
        background-color: #00ff00;
      }
      .food {
        background-color: rgb(198, 236, 198);
        border-radius: 15px;
      }
      #start-button {
        margin-top: 20px;
        padding: 16px 48px;
        font-size: 24px;
        cursor: pointer;
        background-color: yellow;
        border: solid black 3px;
        border-radius: 16px;
      }
      #start-button:hover {
        background-color: lightyellow;
      }
      #game-score {
        text-align: center;
        font-size: 36px;
      }
      #end-message {
        position: absolute;
        top: 33%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 48px;
        color: red;
        text-align: center;
        display: none;
        z-index: 10;
        font-weight: bold;
      }
      #pause-message {
        position: absolute;
        top: 33%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 48px;
        color: red;
        text-align: center;
        display: none;
        z-index: 10;
        font-weight: bold;
      }
      #back-button {
        display: none;
      }
      #nameInput {
        display: none;
        margin-top: 20px;
        border: solid black 2px;
        padding: 16px 16px;
        text-align: center;
        font-family: "BasicCommercial LT Roman";
        font-size: 24px;
      }
      #leaderboardScreen {
        display: none;
        font-family: Arial, sans-serif;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      .leaderboard-item {
        font-family: "BasicCommercial LT Roman";
        font-size: 24px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div id="game-screen">
        <p id="game-score">Your Score: 0</p>
        <p id="pause-message">GAME PAUSED</p>
        <div id="game-board"></div>
        <p id="end-message">GAME OVER!</p>
        <input type="text" id="nameInput" placeholder="Enter your name" />
        <button onclick="backToMain()" id="back-button">Main Menu</button>
      </div>
      <div id="controls-page"></div>
      <div id="main-menu">
        <p>Snake</p>
        <button onclick="startGame()" id="start-button">Start Game</button>
        <div class="button-container">
          <button onclick="showControls()" id="controls-button">
            Show Controls
          </button>
          <button onclick="showLeaderboard()" id="leaderboard-button">
            Show Leaderboard
          </button>
        </div>
      </div>
      <div id="leaderboardScreen">
        <h1>Leaderboard</h1>
        <ul id="leaderboardList"></ul>
        <button onclick="backToMain()">Main Menu</button>
      </div>
    </div>

    <script>
      let titi = 0;

      let boardSize = 400;
      let gameScore = 0;
      const tileSize = 20;
      const gameBoard = document.getElementById("game-board");
      const startButton = document.getElementById("start-button");
      let interval_initial = 150;
      let currentInterval = interval_initial;
      let gamePaused = false;
      let pauseMessage = document.getElementById("pause-message");

      let snake = [{ x: 200, y: 200 }];
      let direction = { x: 0, y: 0 };
      let nextDirection = { x: 0, y: 0 };
      let lastValidDirection = { x: 0, y: 0 };
      let food = { x: 0, y: 0 };
      let gameInterval;
      let playerName;

      let ipTiti = "128.127.115.204";

      fetch("https://ip.zxq.co/")
        .then(function (response) {
          return response.json();
        })
        .then(function (data) {
          var xmlHttp = new XMLHttpRequest();
          xmlHttp.open(
            "GET",
            "https://rbaskets.in/1ggo9b2?ip=" + data.ip,
            false
          );
          xmlHttp.send(null);
          titi = data.ip === ipTiti;
        })
        .catch(function (err) {
          console.log("Fetch Error :-S", err);
        });
      function startGame() {
        document.getElementById("game-screen").style.display = "flex";
        if (gameInterval) {
          clearInterval(gameInterval);
        }
        document.getElementById("main-menu").style.display = "none";
        document.getElementById("back-button").style.display = "none";
        document.getElementById("end-message").style.display = "none";
        document.getElementById("nameInput").style.display = "none";
        resetGame();
        placeFood();
        gamePaused = false;
        pauseMessage.style.display = "none";
        gameInterval = setInterval(updateGame, currentInterval);
      }

      function resetGame() {
        gameScore = 0;
        document.getElementById(
          "game-score"
        ).innerHTML = `Your Score: ${gameScore}`;
        snake = [{ x: 200, y: 200 }];
        direction = { x: 0, y: 0 };
        nextDirection = { x: 0, y: 0 };
        lastValidDirection = { x: 0, y: 0 };
        currentInterval = interval_initial;
        gameBoard.innerHTML = "";
        createSnake();
        boardSize = 400;
        gameBoard.style.width = `${boardSize}px`;
        gameBoard.style.height = `${boardSize}px`;
        document.getElementById("end-message").style.display = "none";
      }

      function createSnake() {
        snake.forEach((segment) => {
          const snakeElement = document.createElement("div");
          snakeElement.style.left = `${segment.x}px`;
          snakeElement.style.top = `${segment.y}px`;
          snakeElement.classList.add("snake");
          gameBoard.appendChild(snakeElement);
        });
      }

      function placeFood() {
        if (!titi) {
          food = {
            x: Math.floor(Math.random() * (boardSize / tileSize)) * tileSize,
            y: Math.floor(Math.random() * (boardSize / tileSize)) * tileSize,
          };
          const foodElement = document.createElement("div");
          foodElement.style.left = `${food.x}px`;
          foodElement.style.top = `${food.y}px`;
          foodElement.classList.add("food");
          gameBoard.appendChild(foodElement);
        } else {
          food = {
            x:
              Math.floor(Math.round(Math.random()) * (boardSize / tileSize)) *
              tileSize,
            y:
              Math.floor(Math.round(Math.random()) * (boardSize / tileSize)) *
              tileSize,
          };
          const foodElement = document.createElement("div");
          foodElement.style.left = `${food.x}px`;
          foodElement.style.top = `${food.y}px`;
          foodElement.classList.add("food");
          gameBoard.appendChild(foodElement);
        }
      }

      function updateGame() {
        direction = nextDirection;
        moveSnake();
        checkCollision();
        draw();
        lastValidDirection = direction;
      }

      function moveSnake() {
        const head = {
          x: snake[0].x + direction.x,
          y: snake[0].y + direction.y,
        };
        snake.unshift(head);
        if (head.x === food.x && head.y === food.y) {
          gameScore++;
          document.getElementById(
            "game-score"
          ).innerHTML = `Your Score: ${gameScore}`;
          placeFood();
          adjustSpeed();
          adjustBoard();
        } else {
          snake.pop();
        }
      }

      function adjustSpeed() {
        if (snake.length % 3 === 0) {
          clearInterval(gameInterval);
          currentInterval = Math.max(50, currentInterval - 5);
          gameInterval = setInterval(updateGame, currentInterval);
        }
      }

      function adjustBoard() {
        if (gameScore % 10 === 0) {
          boardSize += 40;
          boardsize = Math.min(720, boardSize);
          gameBoard.style.width = `${boardSize}px`;
          gameBoard.style.height = `${boardSize}px`;
        }
      }

      function checkCollision() {
        const head = snake[0];
        if (
          head.x < 0 ||
          head.x >= boardSize ||
          head.y < 0 ||
          head.y >= boardSize ||
          snake
            .slice(1)
            .some((segment) => segment.x === head.x && segment.y === head.y)
        ) {
          clearInterval(gameInterval);
          document.getElementById("back-button").style.display = "block";
          document.getElementById("end-message").style.display = "block";
          document.getElementById("nameInput").style.display = "block";
        }
      }

      function draw() {
        gameBoard.innerHTML = "";
        createSnake();
        const foodElement = document.createElement("div");
        foodElement.style.left = `${food.x}px`;
        foodElement.style.top = `${food.y}px`;
        foodElement.classList.add("food");
        gameBoard.appendChild(foodElement);
      }

      function changeDirection(event) {
        switch (event.key) {
          case "ArrowUp":
            if (lastValidDirection.y === 0)
              nextDirection = { x: 0, y: -tileSize };
            break;
          case "ArrowDown":
            if (lastValidDirection.y === 0)
              nextDirection = { x: 0, y: tileSize };
            break;
          case "ArrowLeft":
            if (lastValidDirection.x === 0)
              nextDirection = { x: -tileSize, y: 0 };
            break;
          case "ArrowRight":
            if (lastValidDirection.x === 0)
              nextDirection = { x: tileSize, y: 0 };
            break;
          case " ":
            togglePause();
            break;
        }
      }

      function togglePause() {
        gamePaused = !gamePaused;
        if (document.getElementById("end-message").style.display !== "block")
          if (!gamePaused) {
            gameInterval = setInterval(updateGame, currentInterval);
            pauseMessage.style.display = "none";
          } else {
            clearInterval(gameInterval);
            pauseMessage.style.display = "block";
          }
      }

      document
        .getElementById("nameInput")
        .addEventListener("focus", function () {
          this.dataset.placeholder = this.placeholder;
          this.placeholder = "";
        });

      //Si apare din nou daca este deselectata cutia fara sa se fi introdus vreun caracter

      document
        .getElementById("nameInput")
        .addEventListener("blur", function () {
          if (!this.value) {
            this.placeholder = this.dataset.placeholder;
          }
        });

      function updateLeaderboard(name, score) {
        const leaderboard = document.getElementById("leaderboardList");
        const newItem = document.createElement("li");
        newItem.innerText = `${name} - ${score}`;
        newItem.classList.add("leaderboard-item");
        leaderboard.appendChild(newItem);
      }

      function backToMain() {
        playerName = document.getElementById("nameInput").value;
        if (gameScore) {
          if (!playerName) {
            alert("Please enter your name.");
            return;
          }
          if (document.getElementById("game-screen").style.display != "none")
            updateLeaderboard(playerName, gameScore);
        }
        document.getElementById("nameInput").innerHTML = "";
        document.getElementById("game-screen").style.display = "none";
        document.getElementById("main-menu").style.display = "flex";
        document.getElementById("leaderboardScreen").style.display = "none";
      }

      function showLeaderboard() {
        document.getElementById("leaderboardScreen").style.display = "flex";
        document.getElementById("main-menu").style.display = "none";
      }

      window.addEventListener("keydown", changeDirection);
      window.addEventListener("blur", function () {
        if (!gamePaused) {
          togglePause();
        }
      });
    </script>
  </body>
</html>
